#+TITLE: GFramework for Unity developer
#+OPTIONS: ^:{}
#+OPTIONS: \n:t 
#+HTML_HEAD: <link rel="stylesheet" href="http://orgmode.org/org-manual.css" type="text/css" />
Tips: 下载 htlm 格式文件直接在浏览器中打开，可以查看格式优化过的文档。
* 简介
GameFramework for Unity developer, 简称 GFramework 或 GFW
* 设计宗旨
这是一个精练的框架，该框架的设计宗旨是加速 Unity 开发。下面是构建该框架的指导方针：
***** 充分利用 Unity 便捷的开发功能。
***** 有效分解开发参与者工作的耦合。
***** 框架需要保持简单易用。
***** 尽量编写编辑器脚本来自动化开发工作。
。。。。（后续想到再补充）

** 一些零散的思考
*** 关于变量绑定
Unity 为脚本提供了方便的变量绑定，这种方式非常利于快速开发。缺点是游戏修改涉及了需要绑定的对象，脚本需要重新绑定；脚本修改了导出变量也需要重新绑定。所以在使用这个功能的时候，需要一个权衡，能接受上面缺点的话，建议 UI 制作工作和脚本绑定工作分开，脚本绑定的工作更适合程序员去操作。如果无法接受上面的缺点，一个可选方案是制作 UI 时，给每个游戏对象唯一的名字（可以开发一个脚本进行唯一性检查），变量的绑定通过程序写代码来实现，这样 UI 制作和脚本绑定就完全独立开了。GFW 本身没有限制使用哪种方案，两种方案都可以支持。

Tips: 后续考虑添加变量自动绑定的功能，指定一个规则，游戏对象命名前缀为_B_的，执行自动绑定脚本时，会自动生成该游戏对象的绑定。
*** 关于 UI 制作 
通常游戏中的 UI 制作工作都是比较繁重的，所以 UI 制作工作的解耦很有必要，这样就可以让不同的人制作不同的 UI 界面，从而加快 UI 界面制作。框架规定所有 UI 面板都制作为 Prefabs 放置在 Resource/UI/下。
关于多分辨率的支持，采用了 uGUI 所支持的方案，CanvasScaler 设置为 ScaleWithScreenSize，ReferenceResolution 设置为 UI 设计时采用的分辨率（目前主流机器分辨率）。
*** 关于框架结构
框架采用扁平结构即大部分模块的功能以单例或者静态类的形式提供，这样可以保持自身的简单易用。

*** 关于项目结构
游戏开发的工作是比较繁多的，有效的分解游戏逻辑模块，可以让游戏开发工作并行执行。GFW 自带的 example 中，对游戏逻辑进行的分解如下，GXXXXScene 用来处理场景的初始化，GXXXXView 用来处理指定 UI 面板的逻辑，GXXXXModal 中处理数据相关的逻辑。不同模块间的通信通过 GEventMgr 来进行。
通常在开发过程中，不同的开发人员人可以开发不同的 GXXXXScene、GXXXXView、GXXXXModal。
* 模块
** 当前包含模块
*** Mgr
| 模块名称                          | 介绍                                             |
|-----------------------------------+--------------------------------------------------|
| GMainMgr                          | 总的管理者，会负责框架的初始化、全局的消息处理。 |
| GSceneMgr                         | 场景管理者，负责 Scene 的管理逻辑                |
| GViewMgr/GUIViewMgr/GModalViewMgr | UI 管理者，负责 UI 的管理逻辑                    |
| GEventMgr                         | 观察者模式实现，负责消息传递                                   |
*** Utility
| Utility 模块名称 | 介绍                                   |
|------------------+----------------------------------------|
| GFileUtility     | 文件操作工具                           |
| GLogUtility      | 日志工具，支持日志分级，以及导出到文件 |
| GCoordUtility    | 坐标处理相关的工具                     |
| GTimeUtility     | 时间相关工具                           |
| GAppUtility      | Application 工具                    |
| GUtility         | 通用工具                               |

Tips: GUtility 目前很不稳定，其中的方法后面可能会放到新的独立文件中。
*** UI 控件
| UI 控件模块         | 介绍       |
|--------------------+------------|
| GMovingImage       | 滚动的图片 |
Tips: 本框架 UI 基于 uGUI
*** 编辑器
| 编辑器模块         | 介绍                                    |
|--------------------+-----------------------------------------|
| GEditorMovingImage | 对应于 GMovingImage,用于通过编辑器创建 UI |
| GEditorUIMenu      | 编辑器菜单功能                          |
| GEditorUtility     | 编辑器工具                                   |

** 待开发模块
按照目前碰到的需求添加
* 使用方法
**** UI 资源
每个 UI 面板都放置在 Resource/UI 下面，可以在该路径下再分文件夹，也可以按照一定命名规则来区分不同模块的 UI。建议 ui 名称采用拼音，方便英语水平低的同事参与 UI 制作。
UI 面板中元素的命名按照 DefaultName_xxxx，例如：Button_kaishi,Button_guanbi 等等(这样方便后续程序自动化处理)。
**** GFW 会自动生成游戏对象到场景中，所有自动生成的对象名称规则为__XXX__。下面的结构就是当前框架所生成的：
#+BEGIN_EXAMPLE
// Canvas
// - __UIView__
// --  __UIView_1__
// --  __UIView_2__
// --  __UIView_3__
// - __ModalView__
// --  __ModalView_1__
// --  __ModalView_2__
// --  __ModalView_3__
// __Scene__
// __MainMgr__
#+END_EXAMPLE
**** 框架的入口为 GMainMgr 中的 Init_
该静态函数添加了[RuntimeInitializeOnLoadMethod],所以场景加载后会执行该方法。需要注意的是，如果你自己的其他类需要在开始的时候进行初始化，那么需要将你的初始化放置在 Init_中，不要在使用[RuntimeInitializeOnLoadMethod]来触发你的初始化方法。因为不同文件中的被标记为 RuntimeInitializeOnLoadMethod 的方法触发顺序是确定的。
**** 新添加场景需要为其添加对应枚举，并注册。
枚举的添加在 GMainMgr 中的 GESceneType 中。
Tips:
这个机制后面会优化掉，场景很多时枚举定义也不太方便，需要支持通过加载配置文件来注册。这个过程最好自动化掉。
方案 1：写一个脚本为场景名称末尾不含_Editor 的场景自动生成 GESceneType 枚举。
**** 场景的切换
#+BEGIN_SRC c#
GSceneMgr.GetInstance ().ChangeToScene(sceneType);
GSceneMgr.GetInstance ().ChangeToNextScene ();
#+END_SRC
**** UI 的切换
UI 管理采用分层栈式结构，GViewZOrder 定义了 UI 的层，Push、Pop 是对 UI 栈的操作。框架默认提供了 3 个层次，如有需要只需按顺序添加新的枚举即可，框架支持层次扩展。
#+BEGIN_SRC c#
GUIViewMgr.GetInstance ().PushView (CreateBg);
GUIViewMgr.GetInstance ().PushView (GGameStartView.CreateView, GViewZOrder.kZOrder2);
#+END_SRC
* 关于我
目前我正在求职。[[https://github.com/wolfand11/AboutMe][点击了解详情]]
https://github.com/wolfand11/AboutMe
